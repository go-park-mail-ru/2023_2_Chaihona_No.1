// Code generated by MockGen. DO NOT EDIT.
// Source: ../../repositories/subscribe_levels/subscribe_level_repository.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	reflect "reflect"

	model "github.com/go-park-mail-ru/2023_2_Chaihona_No.1/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockSubscribeLevelRepository is a mock of SubscribeLevelRepository interface.
type MockSubscribeLevelRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscribeLevelRepositoryMockRecorder
}

// MockSubscribeLevelRepositoryMockRecorder is the mock recorder for MockSubscribeLevelRepository.
type MockSubscribeLevelRepositoryMockRecorder struct {
	mock *MockSubscribeLevelRepository
}

// NewMockSubscribeLevelRepository creates a new mock instance.
func NewMockSubscribeLevelRepository(ctrl *gomock.Controller) *MockSubscribeLevelRepository {
	mock := &MockSubscribeLevelRepository{ctrl: ctrl}
	mock.recorder = &MockSubscribeLevelRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscribeLevelRepository) EXPECT() *MockSubscribeLevelRepositoryMockRecorder {
	return m.recorder
}

// AddNewLevel mocks base method.
func (m *MockSubscribeLevelRepository) AddNewLevel(user *model.Profile) (model.SubscribeLevel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewLevel", user)
	ret0, _ := ret[0].(model.SubscribeLevel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewLevel indicates an expected call of AddNewLevel.
func (mr *MockSubscribeLevelRepositoryMockRecorder) AddNewLevel(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewLevel", reflect.TypeOf((*MockSubscribeLevelRepository)(nil).AddNewLevel), user)
}

// DeleteLevel mocks base method.
func (m *MockSubscribeLevelRepository) DeleteLevel(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLevel", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLevel indicates an expected call of DeleteLevel.
func (mr *MockSubscribeLevelRepositoryMockRecorder) DeleteLevel(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLevel", reflect.TypeOf((*MockSubscribeLevelRepository)(nil).DeleteLevel), id)
}

// GetLevel mocks base method.
func (m *MockSubscribeLevelRepository) GetLevel(id uint) (model.SubscribeLevel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel", id)
	ret0, _ := ret[0].(model.SubscribeLevel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel.
func (mr *MockSubscribeLevelRepositoryMockRecorder) GetLevel(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockSubscribeLevelRepository)(nil).GetLevel), id)
}

// GetUserLevels mocks base method.
func (m *MockSubscribeLevelRepository) GetUserLevels(userId uint) ([]model.SubscribeLevel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLevels", userId)
	ret0, _ := ret[0].([]model.SubscribeLevel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLevels indicates an expected call of GetUserLevels.
func (mr *MockSubscribeLevelRepositoryMockRecorder) GetUserLevels(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLevels", reflect.TypeOf((*MockSubscribeLevelRepository)(nil).GetUserLevels), userId)
}
