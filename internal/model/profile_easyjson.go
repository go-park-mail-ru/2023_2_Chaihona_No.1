// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson521a5691DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel(in *jlexer.Lexer, out *Profile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			easyjson521a5691DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel1(in, &out.User)
		case "subscribers":
			out.Subscribers = uint(in.Uint())
		case "subscribe_levels":
			if in.IsNull() {
				in.Skip()
				out.SubscribeLevels = nil
			} else {
				in.Delim('[')
				if out.SubscribeLevels == nil {
					if !in.IsDelim(']') {
						out.SubscribeLevels = make([]SubscribeLevel, 0, 0)
					} else {
						out.SubscribeLevels = []SubscribeLevel{}
					}
				} else {
					out.SubscribeLevels = (out.SubscribeLevels)[:0]
				}
				for !in.IsDelim(']') {
					var v1 SubscribeLevel
					easyjson521a5691DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel2(in, &v1)
					out.SubscribeLevels = append(out.SubscribeLevels, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "subscriptions":
			if in.IsNull() {
				in.Skip()
				out.Subscriptions = nil
			} else {
				in.Delim('[')
				if out.Subscriptions == nil {
					if !in.IsDelim(']') {
						out.Subscriptions = make([]User, 0, 0)
					} else {
						out.Subscriptions = []User{}
					}
				} else {
					out.Subscriptions = (out.Subscriptions)[:0]
				}
				for !in.IsDelim(']') {
					var v2 User
					easyjson521a5691DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel1(in, &v2)
					out.Subscriptions = append(out.Subscriptions, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "donated":
			out.Donated = string(in.String())
		case "currency":
			out.Currency = string(in.String())
		case "goals":
			if in.IsNull() {
				in.Skip()
				out.Goals = nil
			} else {
				in.Delim('[')
				if out.Goals == nil {
					if !in.IsDelim(']') {
						out.Goals = make([]Goal, 0, 0)
					} else {
						out.Goals = []Goal{}
					}
				} else {
					out.Goals = (out.Goals)[:0]
				}
				for !in.IsDelim(']') {
					var v3 Goal
					(v3).UnmarshalEasyJSON(in)
					out.Goals = append(out.Goals, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_followed":
			out.IsFollowed = bool(in.Bool())
		case "visiter_subscription_level_id":
			out.VisiterSubscriptionLevelId = int(in.Int())
		case "visiter_subscription_id":
			out.SubscriptionId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel(out *jwriter.Writer, in Profile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		easyjson521a5691EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel1(out, in.User)
	}
	{
		const prefix string = ",\"subscribers\":"
		out.RawString(prefix)
		out.Uint(uint(in.Subscribers))
	}
	if len(in.SubscribeLevels) != 0 {
		const prefix string = ",\"subscribe_levels\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v4, v5 := range in.SubscribeLevels {
				if v4 > 0 {
					out.RawByte(',')
				}
				easyjson521a5691EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel2(out, v5)
			}
			out.RawByte(']')
		}
	}
	if len(in.Subscriptions) != 0 {
		const prefix string = ",\"subscriptions\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v6, v7 := range in.Subscriptions {
				if v6 > 0 {
					out.RawByte(',')
				}
				easyjson521a5691EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel1(out, v7)
			}
			out.RawByte(']')
		}
	}
	if in.Donated != "" {
		const prefix string = ",\"donated\":"
		out.RawString(prefix)
		out.String(string(in.Donated))
	}
	if in.Currency != "" {
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	if len(in.Goals) != 0 {
		const prefix string = ",\"goals\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.Goals {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"is_followed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFollowed))
	}
	{
		const prefix string = ",\"visiter_subscription_level_id\":"
		out.RawString(prefix)
		out.Int(int(in.VisiterSubscriptionLevelId))
	}
	{
		const prefix string = ",\"visiter_subscription_id\":"
		out.RawString(prefix)
		out.Int(int(in.SubscriptionId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Profile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Profile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Profile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Profile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel(l, v)
}
func easyjson521a5691DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel2(in *jlexer.Lexer, out *SubscribeLevel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "level":
			out.Level = uint(in.Uint())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "currency":
			out.Currency = string(in.String())
		case "cost_integer":
			out.CostInteger = uint(in.Uint())
		case "cost_fractional":
			out.CostFractional = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel2(out *jwriter.Writer, in SubscribeLevel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"level\":"
		out.RawString(prefix)
		out.Uint(uint(in.Level))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	{
		const prefix string = ",\"cost_integer\":"
		out.RawString(prefix)
		out.Uint(uint(in.CostInteger))
	}
	{
		const prefix string = ",\"cost_fractional\":"
		out.RawString(prefix)
		out.Uint(uint(in.CostFractional))
	}
	out.RawByte('}')
}
func easyjson521a5691DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel1(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "nickname":
			out.Nickname = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "user_type":
			out.UserType = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "background":
			out.Background = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "is_author":
			out.Is_author = bool(in.Bool())
		case "visiter_subscription_level_id":
			out.VisiterSubscriptionLevelId = int(in.Int())
		case "visiter_subscription_id":
			out.SubscriptionId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel1(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"nickname\":"
		out.RawString(prefix)
		out.String(string(in.Nickname))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"user_type\":"
		out.RawString(prefix)
		out.String(string(in.UserType))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"background\":"
		out.RawString(prefix)
		out.String(string(in.Background))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"is_author\":"
		out.RawString(prefix)
		out.Bool(bool(in.Is_author))
	}
	{
		const prefix string = ",\"visiter_subscription_level_id\":"
		out.RawString(prefix)
		out.Int(int(in.VisiterSubscriptionLevelId))
	}
	{
		const prefix string = ",\"visiter_subscription_id\":"
		out.RawString(prefix)
		out.Int(int(in.SubscriptionId))
	}
	out.RawByte('}')
}
