// Code generated by MockGen. DO NOT EDIT.
// Source: post_storage.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	model "project/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPostRepository is a mock of PostRepository interface.
type MockPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryMockRecorder
}

// MockPostRepositoryMockRecorder is the mock recorder for MockPostRepository.
type MockPostRepositoryMockRecorder struct {
	mock *MockPostRepository
}

// NewMockPostRepository creates a new mock instance.
func NewMockPostRepository(ctrl *gomock.Controller) *MockPostRepository {
	mock := &MockPostRepository{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepository) EXPECT() *MockPostRepositoryMockRecorder {
	return m.recorder
}

// CreateNewPost mocks base method.
func (m *MockPostRepository) CreateNewPost(user model.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewPost", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewPost indicates an expected call of CreateNewPost.
func (mr *MockPostRepositoryMockRecorder) CreateNewPost(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewPost", reflect.TypeOf((*MockPostRepository)(nil).CreateNewPost), user)
}

// DeletePost mocks base method.
func (m *MockPostRepository) DeletePost(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostRepositoryMockRecorder) DeletePost(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostRepository)(nil).DeletePost), id)
}

// GetPostById mocks base method.
func (m *MockPostRepository) GetPostById(id uint) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostById", id)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostById indicates an expected call of GetPostById.
func (mr *MockPostRepositoryMockRecorder) GetPostById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostById", reflect.TypeOf((*MockPostRepository)(nil).GetPostById), id)
}

// GetPosts mocks base method.
func (m *MockPostRepository) GetPosts() ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts")
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockPostRepositoryMockRecorder) GetPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockPostRepository)(nil).GetPosts))
}

// GetPostsByAuthorId mocks base method.
func (m *MockPostRepository) GetPostsByAuthorId(authorId uint) (*[]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByAuthorId", authorId)
	ret0, _ := ret[0].(*[]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByAuthorId indicates an expected call of GetPostsByAuthorId.
func (mr *MockPostRepositoryMockRecorder) GetPostsByAuthorId(authorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByAuthorId", reflect.TypeOf((*MockPostRepository)(nil).GetPostsByAuthorId), authorId)
}
