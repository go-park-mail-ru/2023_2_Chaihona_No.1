// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package handlers

import (
	json "encoding/json"
	model "github.com/go-park-mail-ru/2023_2_Chaihona_No.1/internal/model"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	multipart "mime/multipart"
	textproto "net/textproto"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers(in *jlexer.Lexer, out *UserForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			easyjson84463b63Decode(in, &out.Body)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers(out *jwriter.Writer, in UserForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		easyjson84463b63Encode(out, in.Body)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers(l, v)
}
func easyjson84463b63Decode(in *jlexer.Lexer, out *struct {
	User struct {
		ID          uint   `json:"id"`
		Nickname    string `json:"nickname"`
		Login       string `json:"login"`
		OldPassword string `json:"old_password"`
		NewPassword string `json:"new_password"`
		Status      string `json:"status"`
		Avatar      string `json:"avatar"`
		Background  string `json:"background"`
		Description string `json:"description"`
		IsAuthor    bool   `json:"is_author"`
	} `json:"user"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			easyjson84463b63Decode1(in, &out.User)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63Encode(out *jwriter.Writer, in struct {
	User struct {
		ID          uint   `json:"id"`
		Nickname    string `json:"nickname"`
		Login       string `json:"login"`
		OldPassword string `json:"old_password"`
		NewPassword string `json:"new_password"`
		Status      string `json:"status"`
		Avatar      string `json:"avatar"`
		Background  string `json:"background"`
		Description string `json:"description"`
		IsAuthor    bool   `json:"is_author"`
	} `json:"user"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		easyjson84463b63Encode1(out, in.User)
	}
	out.RawByte('}')
}
func easyjson84463b63Decode1(in *jlexer.Lexer, out *struct {
	ID          uint   `json:"id"`
	Nickname    string `json:"nickname"`
	Login       string `json:"login"`
	OldPassword string `json:"old_password"`
	NewPassword string `json:"new_password"`
	Status      string `json:"status"`
	Avatar      string `json:"avatar"`
	Background  string `json:"background"`
	Description string `json:"description"`
	IsAuthor    bool   `json:"is_author"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "nickname":
			out.Nickname = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "old_password":
			out.OldPassword = string(in.String())
		case "new_password":
			out.NewPassword = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "background":
			out.Background = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "is_author":
			out.IsAuthor = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63Encode1(out *jwriter.Writer, in struct {
	ID          uint   `json:"id"`
	Nickname    string `json:"nickname"`
	Login       string `json:"login"`
	OldPassword string `json:"old_password"`
	NewPassword string `json:"new_password"`
	Status      string `json:"status"`
	Avatar      string `json:"avatar"`
	Background  string `json:"background"`
	Description string `json:"description"`
	IsAuthor    bool   `json:"is_author"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"nickname\":"
		out.RawString(prefix)
		out.String(string(in.Nickname))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"old_password\":"
		out.RawString(prefix)
		out.String(string(in.OldPassword))
	}
	{
		const prefix string = ",\"new_password\":"
		out.RawString(prefix)
		out.String(string(in.NewPassword))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"background\":"
		out.RawString(prefix)
		out.String(string(in.Background))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"is_author\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAuthor))
	}
	out.RawByte('}')
}
func easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers1(in *jlexer.Lexer, out *StatusForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			easyjson84463b63Decode2(in, &out.Body)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers1(out *jwriter.Writer, in StatusForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		easyjson84463b63Encode2(out, in.Body)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatusForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatusForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatusForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatusForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers1(l, v)
}
func easyjson84463b63Decode2(in *jlexer.Lexer, out *struct {
	Status string `json:"status"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63Encode2(out *jwriter.Writer, in struct {
	Status string `json:"status"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	out.RawByte('}')
}
func easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers2(in *jlexer.Lexer, out *RatingForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			easyjson84463b63Decode3(in, &out.Body)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers2(out *jwriter.Writer, in RatingForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		easyjson84463b63Encode3(out, in.Body)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RatingForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RatingForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RatingForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RatingForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers2(l, v)
}
func easyjson84463b63Decode3(in *jlexer.Lexer, out *struct {
	Rating int `json:"rating"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rating":
			out.Rating = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63Encode3(out *jwriter.Writer, in struct {
	Rating int `json:"rating"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Rating))
	}
	out.RawByte('}')
}
func easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers3(in *jlexer.Lexer, out *PostForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			easyjson84463b63Decode4(in, &out.Body)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers3(out *jwriter.Writer, in PostForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		easyjson84463b63Encode4(out, in.Body)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers3(l, v)
}
func easyjson84463b63Decode4(in *jlexer.Lexer, out *struct {
	Id            string         `json:"id"`
	MinSubLevelId uint           `json:"min_subscription_level_id"`
	Header        string         `json:"header"`
	Body          string         `json:"body,omitempty"`
	Tags          []model.Tag    `json:"tags,omitempty"`
	Attaches      []model.Attach `json:"attaches,omitempty"`
	Pinned        struct {
		Files   []model.Attach `json:"files,omitempty"`
		Deleted []string       `json:"deleted"`
	} `json:"pinned,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "min_subscription_level_id":
			out.MinSubLevelId = uint(in.Uint())
		case "header":
			out.Header = string(in.String())
		case "body":
			out.Body = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]model.Tag, 0, 2)
					} else {
						out.Tags = []model.Tag{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v1 model.Tag
					(v1).UnmarshalEasyJSON(in)
					out.Tags = append(out.Tags, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attaches":
			if in.IsNull() {
				in.Skip()
				out.Attaches = nil
			} else {
				in.Delim('[')
				if out.Attaches == nil {
					if !in.IsDelim(']') {
						out.Attaches = make([]model.Attach, 0, 0)
					} else {
						out.Attaches = []model.Attach{}
					}
				} else {
					out.Attaches = (out.Attaches)[:0]
				}
				for !in.IsDelim(']') {
					var v2 model.Attach
					(v2).UnmarshalEasyJSON(in)
					out.Attaches = append(out.Attaches, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pinned":
			easyjson84463b63Decode5(in, &out.Pinned)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63Encode4(out *jwriter.Writer, in struct {
	Id            string         `json:"id"`
	MinSubLevelId uint           `json:"min_subscription_level_id"`
	Header        string         `json:"header"`
	Body          string         `json:"body,omitempty"`
	Tags          []model.Tag    `json:"tags,omitempty"`
	Attaches      []model.Attach `json:"attaches,omitempty"`
	Pinned        struct {
		Files   []model.Attach `json:"files,omitempty"`
		Deleted []string       `json:"deleted"`
	} `json:"pinned,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"min_subscription_level_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.MinSubLevelId))
	}
	{
		const prefix string = ",\"header\":"
		out.RawString(prefix)
		out.String(string(in.Header))
	}
	if in.Body != "" {
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v3, v4 := range in.Tags {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Attaches) != 0 {
		const prefix string = ",\"attaches\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.Attaches {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"pinned\":"
		out.RawString(prefix)
		easyjson84463b63Encode5(out, in.Pinned)
	}
	out.RawByte('}')
}
func easyjson84463b63Decode5(in *jlexer.Lexer, out *struct {
	Files   []model.Attach `json:"files,omitempty"`
	Deleted []string       `json:"deleted"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "files":
			if in.IsNull() {
				in.Skip()
				out.Files = nil
			} else {
				in.Delim('[')
				if out.Files == nil {
					if !in.IsDelim(']') {
						out.Files = make([]model.Attach, 0, 0)
					} else {
						out.Files = []model.Attach{}
					}
				} else {
					out.Files = (out.Files)[:0]
				}
				for !in.IsDelim(']') {
					var v7 model.Attach
					(v7).UnmarshalEasyJSON(in)
					out.Files = append(out.Files, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "deleted":
			if in.IsNull() {
				in.Skip()
				out.Deleted = nil
			} else {
				in.Delim('[')
				if out.Deleted == nil {
					if !in.IsDelim(']') {
						out.Deleted = make([]string, 0, 4)
					} else {
						out.Deleted = []string{}
					}
				} else {
					out.Deleted = (out.Deleted)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.Deleted = append(out.Deleted, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63Encode5(out *jwriter.Writer, in struct {
	Files   []model.Attach `json:"files,omitempty"`
	Deleted []string       `json:"deleted"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Files) != 0 {
		const prefix string = ",\"files\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v9, v10 := range in.Files {
				if v9 > 0 {
					out.RawByte(',')
				}
				(v10).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"deleted\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Deleted == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Deleted {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers4(in *jlexer.Lexer, out *PaymentForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			easyjson84463b63Decode6(in, &out.Body)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers4(out *jwriter.Writer, in PaymentForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		easyjson84463b63Encode6(out, in.Body)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers4(l, v)
}
func easyjson84463b63Decode6(in *jlexer.Lexer, out *struct {
	DonaterId uint   `json:"donater_id"`
	CreatorId uint   `json:"creator_id"`
	Currency  string `json:"currency,omitempty"`
	Value     string `json:"value,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "donater_id":
			out.DonaterId = uint(in.Uint())
		case "creator_id":
			out.CreatorId = uint(in.Uint())
		case "currency":
			out.Currency = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63Encode6(out *jwriter.Writer, in struct {
	DonaterId uint   `json:"donater_id"`
	CreatorId uint   `json:"creator_id"`
	Currency  string `json:"currency,omitempty"`
	Value     string `json:"value,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"donater_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.DonaterId))
	}
	{
		const prefix string = ",\"creator_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.CreatorId))
	}
	if in.Currency != "" {
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers5(in *jlexer.Lexer, out *FollowForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			easyjson84463b63Decode7(in, &out.Body)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers5(out *jwriter.Writer, in FollowForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		easyjson84463b63Encode7(out, in.Body)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FollowForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FollowForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FollowForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FollowForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers5(l, v)
}
func easyjson84463b63Decode7(in *jlexer.Lexer, out *struct {
	SubscriptionLevelId int `json:"id"`
	SubscriptionId      int `json:"subscription_id"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.SubscriptionLevelId = int(in.Int())
		case "subscription_id":
			out.SubscriptionId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63Encode7(out *jwriter.Writer, in struct {
	SubscriptionLevelId int `json:"id"`
	SubscriptionId      int `json:"subscription_id"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.SubscriptionLevelId))
	}
	{
		const prefix string = ",\"subscription_id\":"
		out.RawString(prefix)
		out.Int(int(in.SubscriptionId))
	}
	out.RawByte('}')
}
func easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers6(in *jlexer.Lexer, out *FileForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Form":
			easyjson84463b63DecodeMimeMultipart(in, &out.Form)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers6(out *jwriter.Writer, in FileForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Form\":"
		out.RawString(prefix[1:])
		easyjson84463b63EncodeMimeMultipart(out, in.Form)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers6(l, v)
}
func easyjson84463b63DecodeMimeMultipart(in *jlexer.Lexer, out *multipart.Form) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Value":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Value = make(map[string][]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v13 []string
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						in.Delim('[')
						if v13 == nil {
							if !in.IsDelim(']') {
								v13 = make([]string, 0, 4)
							} else {
								v13 = []string{}
							}
						} else {
							v13 = (v13)[:0]
						}
						for !in.IsDelim(']') {
							var v14 string
							v14 = string(in.String())
							v13 = append(v13, v14)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Value)[key] = v13
					in.WantComma()
				}
				in.Delim('}')
			}
		case "File":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.File = make(map[string][]*multipart.FileHeader)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v15 []*multipart.FileHeader
					if in.IsNull() {
						in.Skip()
						v15 = nil
					} else {
						in.Delim('[')
						if v15 == nil {
							if !in.IsDelim(']') {
								v15 = make([]*multipart.FileHeader, 0, 8)
							} else {
								v15 = []*multipart.FileHeader{}
							}
						} else {
							v15 = (v15)[:0]
						}
						for !in.IsDelim(']') {
							var v16 *multipart.FileHeader
							if in.IsNull() {
								in.Skip()
								v16 = nil
							} else {
								if v16 == nil {
									v16 = new(multipart.FileHeader)
								}
								easyjson84463b63DecodeMimeMultipart1(in, v16)
							}
							v15 = append(v15, v16)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.File)[key] = v15
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeMimeMultipart(out *jwriter.Writer, in multipart.Form) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix[1:])
		if in.Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.Value {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				if v17Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v18, v19 := range v17Value {
						if v18 > 0 {
							out.RawByte(',')
						}
						out.String(string(v19))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"File\":"
		out.RawString(prefix)
		if in.File == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v20First := true
			for v20Name, v20Value := range in.File {
				if v20First {
					v20First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v20Name))
				out.RawByte(':')
				if v20Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v21, v22 := range v20Value {
						if v21 > 0 {
							out.RawByte(',')
						}
						if v22 == nil {
							out.RawString("null")
						} else {
							easyjson84463b63EncodeMimeMultipart1(out, *v22)
						}
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson84463b63DecodeMimeMultipart1(in *jlexer.Lexer, out *multipart.FileHeader) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Filename":
			out.Filename = string(in.String())
		case "Header":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Header = make(textproto.MIMEHeader)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v23 []string
					if in.IsNull() {
						in.Skip()
						v23 = nil
					} else {
						in.Delim('[')
						if v23 == nil {
							if !in.IsDelim(']') {
								v23 = make([]string, 0, 4)
							} else {
								v23 = []string{}
							}
						} else {
							v23 = (v23)[:0]
						}
						for !in.IsDelim(']') {
							var v24 string
							v24 = string(in.String())
							v23 = append(v23, v24)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Header)[key] = v23
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Size":
			out.Size = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeMimeMultipart1(out *jwriter.Writer, in multipart.FileHeader) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Filename\":"
		out.RawString(prefix[1:])
		out.String(string(in.Filename))
	}
	{
		const prefix string = ",\"Header\":"
		out.RawString(prefix)
		if in.Header == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v25First := true
			for v25Name, v25Value := range in.Header {
				if v25First {
					v25First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v25Name))
				out.RawByte(':')
				if v25Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v26, v27 := range v25Value {
						if v26 > 0 {
							out.RawByte(',')
						}
						out.String(string(v27))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	out.RawByte('}')
}
func easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers7(in *jlexer.Lexer, out *DeviceIdForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			easyjson84463b63Decode8(in, &out.Body)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers7(out *jwriter.Writer, in DeviceIdForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		easyjson84463b63Encode8(out, in.Body)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeviceIdForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeviceIdForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeviceIdForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeviceIdForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers7(l, v)
}
func easyjson84463b63Decode8(in *jlexer.Lexer, out *struct {
	DeviceId string `json:"device_id"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "device_id":
			out.DeviceId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63Encode8(out *jwriter.Writer, in struct {
	DeviceId string `json:"device_id"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"device_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.DeviceId))
	}
	out.RawByte('}')
}
func easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers8(in *jlexer.Lexer, out *DescriptionForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			easyjson84463b63Decode9(in, &out.Body)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers8(out *jwriter.Writer, in DescriptionForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		easyjson84463b63Encode9(out, in.Body)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DescriptionForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DescriptionForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DescriptionForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DescriptionForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers8(l, v)
}
func easyjson84463b63Decode9(in *jlexer.Lexer, out *struct {
	Description string `json:"description"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63Encode9(out *jwriter.Writer, in struct {
	Description string `json:"description"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	out.RawByte('}')
}
func easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers9(in *jlexer.Lexer, out *CommentForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Body":
			easyjson84463b63Decode10(in, &out.Body)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers9(out *jwriter.Writer, in CommentForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Body\":"
		out.RawString(prefix[1:])
		easyjson84463b63Encode10(out, in.Body)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalHandlers9(l, v)
}
func easyjson84463b63Decode10(in *jlexer.Lexer, out *struct {
	PostId int    `json:"post_id"`
	Text   string `json:"text"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "post_id":
			out.PostId = int(in.Int())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63Encode10(out *jwriter.Writer, in struct {
	PostId int    `json:"post_id"`
	Text   string `json:"text"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"post_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PostId))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}
