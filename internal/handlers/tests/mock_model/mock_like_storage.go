// Code generated by MockGen. DO NOT EDIT.
// Source: ../../repositories/likes/like_repository.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLikeRepository is a mock of LikeRepository interface.
type MockLikeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLikeRepositoryMockRecorder
}

// MockLikeRepositoryMockRecorder is the mock recorder for MockLikeRepository.
type MockLikeRepositoryMockRecorder struct {
	mock *MockLikeRepository
}

// NewMockLikeRepository creates a new mock instance.
func NewMockLikeRepository(ctrl *gomock.Controller) *MockLikeRepository {
	mock := &MockLikeRepository{ctrl: ctrl}
	mock.recorder = &MockLikeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLikeRepository) EXPECT() *MockLikeRepositoryMockRecorder {
	return m.recorder
}

// CreateNewLike mocks base method.
func (m *MockLikeRepository) CreateNewLike(userId, postId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewLike", userId, postId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewLike indicates an expected call of CreateNewLike.
func (mr *MockLikeRepositoryMockRecorder) CreateNewLike(userId, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewLike", reflect.TypeOf((*MockLikeRepository)(nil).CreateNewLike), userId, postId)
}

// DeleteLike mocks base method.
func (m *MockLikeRepository) DeleteLike(userId, postId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", userId, postId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLike indicates an expected call of DeleteLike.
func (mr *MockLikeRepositoryMockRecorder) DeleteLike(userId, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockLikeRepository)(nil).DeleteLike), userId, postId)
}
