// Code generated by MockGen. DO NOT EDIT.
// Source: ../authorization/session_repository.go

// Package mock_authorization is a generated GoMock package.
package mock_model

import (
	authorization "project/authorization"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionRepository is a mock of SessionRepository interface.
type MockSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryMockRecorder
}

// MockSessionRepositoryMockRecorder is the mock recorder for MockSessionRepository.
type MockSessionRepositoryMockRecorder struct {
	mock *MockSessionRepository
}

// NewMockSessionRepository creates a new mock instance.
func NewMockSessionRepository(ctrl *gomock.Controller) *MockSessionRepository {
	mock := &MockSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepository) EXPECT() *MockSessionRepositoryMockRecorder {
	return m.recorder
}

// CheckSession mocks base method.
func (m *MockSessionRepository) CheckSession(sessionId string) (authorization.Session, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSession", sessionId)
	ret0, _ := ret[0].(authorization.Session)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CheckSession indicates an expected call of CheckSession.
func (mr *MockSessionRepositoryMockRecorder) CheckSession(sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSession", reflect.TypeOf((*MockSessionRepository)(nil).CheckSession), sessionId)
}

// DeleteSession mocks base method.
func (m *MockSessionRepository) DeleteSession(sessionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", sessionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionRepositoryMockRecorder) DeleteSession(sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionRepository)(nil).DeleteSession), sessionId)
}

// GetSessions mocks base method.
func (m *MockSessionRepository) GetSessions() ([]authorization.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessions")
	ret0, _ := ret[0].([]authorization.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessions indicates an expected call of GetSessions.
func (mr *MockSessionRepositoryMockRecorder) GetSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessions", reflect.TypeOf((*MockSessionRepository)(nil).GetSessions))
}

// RegisterNewSession mocks base method.
func (m *MockSessionRepository) RegisterNewSession(session authorization.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterNewSession", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterNewSession indicates an expected call of RegisterNewSession.
func (mr *MockSessionRepositoryMockRecorder) RegisterNewSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNewSession", reflect.TypeOf((*MockSessionRepository)(nil).RegisterNewSession), session)
}
