// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: payments.proto

package payments

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentsServiceClient is the client API for PaymentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentsServiceClient interface {
	CreateNewPaymentCtx(ctx context.Context, in *PaymentGRPC, opts ...grpc.CallOption) (*Int, error)
	DeletePaymentCtx(ctx context.Context, in *UInt, opts ...grpc.CallOption) (*Nothing, error)
	GetPaymentCtx(ctx context.Context, in *UUid, opts ...grpc.CallOption) (*PaymentGRPC, error)
	GetPaymentsByAuthorIdCtx(ctx context.Context, in *UInt, opts ...grpc.CallOption) (*PaymentsGRPC, error)
	GetPaymentsByUserIdCtx(ctx context.Context, in *UInt, opts ...grpc.CallOption) (*PaymentsGRPC, error)
	ChangePaymentCtx(ctx context.Context, in *PaymentGRPC, opts ...grpc.CallOption) (*Nothing, error)
}

type paymentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentsServiceClient(cc grpc.ClientConnInterface) PaymentsServiceClient {
	return &paymentsServiceClient{cc}
}

func (c *paymentsServiceClient) CreateNewPaymentCtx(ctx context.Context, in *PaymentGRPC, opts ...grpc.CallOption) (*Int, error) {
	out := new(Int)
	err := c.cc.Invoke(ctx, "/payments.PaymentsService/CreateNewPaymentCtx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsServiceClient) DeletePaymentCtx(ctx context.Context, in *UInt, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/payments.PaymentsService/DeletePaymentCtx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsServiceClient) GetPaymentCtx(ctx context.Context, in *UUid, opts ...grpc.CallOption) (*PaymentGRPC, error) {
	out := new(PaymentGRPC)
	err := c.cc.Invoke(ctx, "/payments.PaymentsService/GetPaymentCtx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsServiceClient) GetPaymentsByAuthorIdCtx(ctx context.Context, in *UInt, opts ...grpc.CallOption) (*PaymentsGRPC, error) {
	out := new(PaymentsGRPC)
	err := c.cc.Invoke(ctx, "/payments.PaymentsService/GetPaymentsByAuthorIdCtx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsServiceClient) GetPaymentsByUserIdCtx(ctx context.Context, in *UInt, opts ...grpc.CallOption) (*PaymentsGRPC, error) {
	out := new(PaymentsGRPC)
	err := c.cc.Invoke(ctx, "/payments.PaymentsService/GetPaymentsByUserIdCtx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsServiceClient) ChangePaymentCtx(ctx context.Context, in *PaymentGRPC, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/payments.PaymentsService/ChangePaymentCtx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentsServiceServer is the server API for PaymentsService service.
// All implementations must embed UnimplementedPaymentsServiceServer
// for forward compatibility
type PaymentsServiceServer interface {
	CreateNewPaymentCtx(context.Context, *PaymentGRPC) (*Int, error)
	DeletePaymentCtx(context.Context, *UInt) (*Nothing, error)
	GetPaymentCtx(context.Context, *UUid) (*PaymentGRPC, error)
	GetPaymentsByAuthorIdCtx(context.Context, *UInt) (*PaymentsGRPC, error)
	GetPaymentsByUserIdCtx(context.Context, *UInt) (*PaymentsGRPC, error)
	ChangePaymentCtx(context.Context, *PaymentGRPC) (*Nothing, error)
	mustEmbedUnimplementedPaymentsServiceServer()
}

// UnimplementedPaymentsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentsServiceServer struct {
}

func (UnimplementedPaymentsServiceServer) CreateNewPaymentCtx(context.Context, *PaymentGRPC) (*Int, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewPaymentCtx not implemented")
}
func (UnimplementedPaymentsServiceServer) DeletePaymentCtx(context.Context, *UInt) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePaymentCtx not implemented")
}
func (UnimplementedPaymentsServiceServer) GetPaymentCtx(context.Context, *UUid) (*PaymentGRPC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentCtx not implemented")
}
func (UnimplementedPaymentsServiceServer) GetPaymentsByAuthorIdCtx(context.Context, *UInt) (*PaymentsGRPC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentsByAuthorIdCtx not implemented")
}
func (UnimplementedPaymentsServiceServer) GetPaymentsByUserIdCtx(context.Context, *UInt) (*PaymentsGRPC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentsByUserIdCtx not implemented")
}
func (UnimplementedPaymentsServiceServer) ChangePaymentCtx(context.Context, *PaymentGRPC) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePaymentCtx not implemented")
}
func (UnimplementedPaymentsServiceServer) mustEmbedUnimplementedPaymentsServiceServer() {}

// UnsafePaymentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentsServiceServer will
// result in compilation errors.
type UnsafePaymentsServiceServer interface {
	mustEmbedUnimplementedPaymentsServiceServer()
}

func RegisterPaymentsServiceServer(s grpc.ServiceRegistrar, srv PaymentsServiceServer) {
	s.RegisterService(&PaymentsService_ServiceDesc, srv)
}

func _PaymentsService_CreateNewPaymentCtx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).CreateNewPaymentCtx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.PaymentsService/CreateNewPaymentCtx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).CreateNewPaymentCtx(ctx, req.(*PaymentGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsService_DeletePaymentCtx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).DeletePaymentCtx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.PaymentsService/DeletePaymentCtx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).DeletePaymentCtx(ctx, req.(*UInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsService_GetPaymentCtx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).GetPaymentCtx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.PaymentsService/GetPaymentCtx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).GetPaymentCtx(ctx, req.(*UUid))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsService_GetPaymentsByAuthorIdCtx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).GetPaymentsByAuthorIdCtx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.PaymentsService/GetPaymentsByAuthorIdCtx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).GetPaymentsByAuthorIdCtx(ctx, req.(*UInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsService_GetPaymentsByUserIdCtx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).GetPaymentsByUserIdCtx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.PaymentsService/GetPaymentsByUserIdCtx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).GetPaymentsByUserIdCtx(ctx, req.(*UInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsService_ChangePaymentCtx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).ChangePaymentCtx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.PaymentsService/ChangePaymentCtx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).ChangePaymentCtx(ctx, req.(*PaymentGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentsService_ServiceDesc is the grpc.ServiceDesc for PaymentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payments.PaymentsService",
	HandlerType: (*PaymentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewPaymentCtx",
			Handler:    _PaymentsService_CreateNewPaymentCtx_Handler,
		},
		{
			MethodName: "DeletePaymentCtx",
			Handler:    _PaymentsService_DeletePaymentCtx_Handler,
		},
		{
			MethodName: "GetPaymentCtx",
			Handler:    _PaymentsService_GetPaymentCtx_Handler,
		},
		{
			MethodName: "GetPaymentsByAuthorIdCtx",
			Handler:    _PaymentsService_GetPaymentsByAuthorIdCtx_Handler,
		},
		{
			MethodName: "GetPaymentsByUserIdCtx",
			Handler:    _PaymentsService_GetPaymentsByUserIdCtx_Handler,
		},
		{
			MethodName: "ChangePaymentCtx",
			Handler:    _PaymentsService_ChangePaymentCtx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payments.proto",
}
