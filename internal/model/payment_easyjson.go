// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel(in *jlexer.Lexer, out *SubRequestUKassa) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		case "capture":
			out.Capture = bool(in.Bool())
		case "payment_method_id":
			out.PaymentMethodId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel(out *jwriter.Writer, in SubRequestUKassa) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		(in.Amount).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"capture\":"
		out.RawString(prefix)
		out.Bool(bool(in.Capture))
	}
	if in.PaymentMethodId != "" {
		const prefix string = ",\"payment_method_id\":"
		out.RawString(prefix)
		out.String(string(in.PaymentMethodId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubRequestUKassa) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubRequestUKassa) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubRequestUKassa) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubRequestUKassa) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel(l, v)
}
func easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel1(in *jlexer.Lexer, out *ResponseUKassa) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "paid":
			out.Paid = bool(in.Bool())
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		case "confirmation":
			(out.Confirmation).UnmarshalEasyJSON(in)
		case "created_at":
			out.CreatedAt = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "metadata":
			if m, ok := out.Metadata.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Metadata.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Metadata = in.Interface()
			}
		case "recipient":
			(out.Recipient).UnmarshalEasyJSON(in)
		case "refundable":
			out.Refundable = bool(in.Bool())
		case "test":
			out.Test = bool(in.Bool())
		case "payment_method":
			(out.PaymentMethodData).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel1(out *jwriter.Writer, in ResponseUKassa) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"paid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Paid))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"confirmation\":"
		out.RawString(prefix)
		(in.Confirmation).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		if m, ok := in.Metadata.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Metadata.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Metadata))
		}
	}
	{
		const prefix string = ",\"recipient\":"
		out.RawString(prefix)
		(in.Recipient).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"refundable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Refundable))
	}
	{
		const prefix string = ",\"test\":"
		out.RawString(prefix)
		out.Bool(bool(in.Test))
	}
	{
		const prefix string = ",\"payment_method\":"
		out.RawString(prefix)
		(in.PaymentMethodData).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseUKassa) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseUKassa) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseUKassa) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseUKassa) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel1(l, v)
}
func easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel2(in *jlexer.Lexer, out *RequestUKassa) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		case "capture":
			out.Capture = bool(in.Bool())
		case "confirmation":
			(out.Confirmation).UnmarshalEasyJSON(in)
		case "save_payment_method":
			out.SavePaymentMethod = bool(in.Bool())
		case "payment_method_data":
			(out.PaymentMethodData).UnmarshalEasyJSON(in)
		case "payment_method_id":
			out.PaymentMethodId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel2(out *jwriter.Writer, in RequestUKassa) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		(in.Amount).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"capture\":"
		out.RawString(prefix)
		out.Bool(bool(in.Capture))
	}
	if true {
		const prefix string = ",\"confirmation\":"
		out.RawString(prefix)
		(in.Confirmation).MarshalEasyJSON(out)
	}
	if in.SavePaymentMethod {
		const prefix string = ",\"save_payment_method\":"
		out.RawString(prefix)
		out.Bool(bool(in.SavePaymentMethod))
	}
	if true {
		const prefix string = ",\"payment_method_data\":"
		out.RawString(prefix)
		(in.PaymentMethodData).MarshalEasyJSON(out)
	}
	if in.PaymentMethodId != "" {
		const prefix string = ",\"payment_method_id\":"
		out.RawString(prefix)
		out.String(string(in.PaymentMethodId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequestUKassa) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestUKassa) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequestUKassa) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestUKassa) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel2(l, v)
}
func easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel3(in *jlexer.Lexer, out *Recipient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = string(in.String())
		case "gateway_id":
			out.GatewayId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel3(out *jwriter.Writer, in Recipient) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"account_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccountId))
	}
	{
		const prefix string = ",\"gateway_id\":"
		out.RawString(prefix)
		out.String(string(in.GatewayId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Recipient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Recipient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Recipient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Recipient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel3(l, v)
}
func easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel4(in *jlexer.Lexer, out *PaymentMethodData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "id":
			out.Id = string(in.String())
		case "saved":
			out.Saved = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel4(out *jwriter.Writer, in PaymentMethodData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Saved {
		const prefix string = ",\"saved\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Saved))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentMethodData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentMethodData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentMethodData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentMethodData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel4(l, v)
}
func easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel5(in *jlexer.Lexer, out *Payment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "donater_id":
			out.DonaterId = uint(in.Uint())
		case "creator_id":
			out.CreatorId = uint(in.Uint())
		case "currency":
			out.Currency = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "type":
			out.Type = uint(in.Uint())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "payment_method_id":
			out.PaymentMethodId = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel5(out *jwriter.Writer, in Payment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"donater_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.DonaterId))
	}
	{
		const prefix string = ",\"creator_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.CreatorId))
	}
	if in.Currency != "" {
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Uint(uint(in.Type))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"payment_method_id\":"
		out.RawString(prefix)
		out.String(string(in.PaymentMethodId))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Payment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Payment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Payment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Payment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel5(l, v)
}
func easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel6(in *jlexer.Lexer, out *DonateRequestUKassa) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		case "capture":
			out.Capture = bool(in.Bool())
		case "confirmation":
			(out.Confirmation).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel6(out *jwriter.Writer, in DonateRequestUKassa) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		(in.Amount).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"capture\":"
		out.RawString(prefix)
		out.Bool(bool(in.Capture))
	}
	if true {
		const prefix string = ",\"confirmation\":"
		out.RawString(prefix)
		(in.Confirmation).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DonateRequestUKassa) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DonateRequestUKassa) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DonateRequestUKassa) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DonateRequestUKassa) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel6(l, v)
}
func easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel7(in *jlexer.Lexer, out *Confirmation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "return_url":
			out.ReturnURL = string(in.String())
		case "confirmation_url":
			out.ConfirmationURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel7(out *jwriter.Writer, in Confirmation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.ReturnURL != "" {
		const prefix string = ",\"return_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReturnURL))
	}
	if in.ConfirmationURL != "" {
		const prefix string = ",\"confirmation_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConfirmationURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Confirmation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Confirmation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Confirmation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Confirmation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel7(l, v)
}
func easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel8(in *jlexer.Lexer, out *Amount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "currency":
			out.Currency = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel8(out *jwriter.Writer, in Amount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Amount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Amount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson377dcee4EncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Amount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Amount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson377dcee4DecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel8(l, v)
}
