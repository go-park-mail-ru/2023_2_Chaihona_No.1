// Code generated by MockGen. DO NOT EDIT.
// Source: ../../repositories/subscriptions/subscription_repository.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	reflect "reflect"

	model "github.com/go-park-mail-ru/2023_2_Chaihona_No.1/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockSubscriptionRepository is a mock of SubscriptionRepository interface.
type MockSubscriptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionRepositoryMockRecorder
}

// MockSubscriptionRepositoryMockRecorder is the mock recorder for MockSubscriptionRepository.
type MockSubscriptionRepositoryMockRecorder struct {
	mock *MockSubscriptionRepository
}

// NewMockSubscriptionRepository creates a new mock instance.
func NewMockSubscriptionRepository(ctrl *gomock.Controller) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepositoryMockRecorder {
	return m.recorder
}

// AddNewSubscription mocks base method.
func (m *MockSubscriptionRepository) AddNewSubscription(subscription model.Subscription) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewSubscription", subscription)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewSubscription indicates an expected call of AddNewSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) AddNewSubscription(subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).AddNewSubscription), subscription)
}

// ChangeSubscription mocks base method.
func (m *MockSubscriptionRepository) ChangeSubscription(subscription model.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeSubscription", subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeSubscription indicates an expected call of ChangeSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) ChangeSubscription(subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).ChangeSubscription), subscription)
}

// CountSubscribers mocks base method.
func (m *MockSubscriptionRepository) CountSubscribers(id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSubscribers", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSubscribers indicates an expected call of CountSubscribers.
func (mr *MockSubscriptionRepositoryMockRecorder) CountSubscribers(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSubscribers", reflect.TypeOf((*MockSubscriptionRepository)(nil).CountSubscribers), id)
}

// DeleteSubscription mocks base method.
func (m *MockSubscriptionRepository) DeleteSubscription(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) DeleteSubscription(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).DeleteSubscription), id)
}

// GetSubscription mocks base method.
func (m *MockSubscriptionRepository) GetSubscription(id int) (model.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", id)
	ret0, _ := ret[0].(model.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) GetSubscription(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).GetSubscription), id)
}

// GetUserSubscriptions mocks base method.
func (m *MockSubscriptionRepository) GetUserSubscriptions(id int) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSubscriptions", id)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSubscriptions indicates an expected call of GetUserSubscriptions.
func (mr *MockSubscriptionRepositoryMockRecorder) GetUserSubscriptions(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSubscriptions", reflect.TypeOf((*MockSubscriptionRepository)(nil).GetUserSubscriptions), id)
}
