// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDfaeaa7eDecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel(in *jlexer.Lexer, out *Analitycs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "user_id":
			out.UserId = int(in.Int())
		case "total_posts":
			out.TotalPosts = int(in.Int())
		case "total_likes":
			out.TotalLikes = int(in.Int())
		case "total_comments":
			out.TotalComments = int(in.Int())
		case "total_donations":
			out.TotalDonations = int(in.Int())
		case "total_donations_earned_integer":
			out.TotalDonationsEarnedInteger = int(in.Int())
		case "total_donations_earned_fractional":
			out.TotalDonationsEarnedFractional = int(in.Int())
		case "total_earned_integer":
			out.TotalEarnedInteger = int(in.Int())
		case "total_earned_fractional":
			out.TotalEarnedFractional = int(in.Int())
		case "total_subscribers":
			out.TotalSubscribers = int(in.Int())
		case "difference_posts":
			out.DifferencePosts = int(in.Int())
		case "difference_likes":
			out.DifferenceLikes = int(in.Int())
		case "difference_comments":
			out.DifferenceComments = int(in.Int())
		case "difference_donations":
			out.DifferenceDonations = int(in.Int())
		case "difference_donations_earned_integer":
			out.DifferenceDonationsEarnedInteger = int(in.Int())
		case "difference_donations_earned_fractional":
			out.DifferenceDonationsEarnedFractional = int(in.Int())
		case "difference_earned_integer":
			out.DifferenceEarnedInteger = int(in.Int())
		case "difference_earned_fractional":
			out.DifferenceEarnedFractional = int(in.Int())
		case "difference_subscribers":
			out.DifferenceSubscribers = int(in.Int())
		case "created_at":
			out.CreatedAt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfaeaa7eEncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel(out *jwriter.Writer, in Analitycs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"total_posts\":"
		out.RawString(prefix)
		out.Int(int(in.TotalPosts))
	}
	{
		const prefix string = ",\"total_likes\":"
		out.RawString(prefix)
		out.Int(int(in.TotalLikes))
	}
	{
		const prefix string = ",\"total_comments\":"
		out.RawString(prefix)
		out.Int(int(in.TotalComments))
	}
	{
		const prefix string = ",\"total_donations\":"
		out.RawString(prefix)
		out.Int(int(in.TotalDonations))
	}
	{
		const prefix string = ",\"total_donations_earned_integer\":"
		out.RawString(prefix)
		out.Int(int(in.TotalDonationsEarnedInteger))
	}
	{
		const prefix string = ",\"total_donations_earned_fractional\":"
		out.RawString(prefix)
		out.Int(int(in.TotalDonationsEarnedFractional))
	}
	{
		const prefix string = ",\"total_earned_integer\":"
		out.RawString(prefix)
		out.Int(int(in.TotalEarnedInteger))
	}
	{
		const prefix string = ",\"total_earned_fractional\":"
		out.RawString(prefix)
		out.Int(int(in.TotalEarnedFractional))
	}
	{
		const prefix string = ",\"total_subscribers\":"
		out.RawString(prefix)
		out.Int(int(in.TotalSubscribers))
	}
	{
		const prefix string = ",\"difference_posts\":"
		out.RawString(prefix)
		out.Int(int(in.DifferencePosts))
	}
	{
		const prefix string = ",\"difference_likes\":"
		out.RawString(prefix)
		out.Int(int(in.DifferenceLikes))
	}
	{
		const prefix string = ",\"difference_comments\":"
		out.RawString(prefix)
		out.Int(int(in.DifferenceComments))
	}
	{
		const prefix string = ",\"difference_donations\":"
		out.RawString(prefix)
		out.Int(int(in.DifferenceDonations))
	}
	{
		const prefix string = ",\"difference_donations_earned_integer\":"
		out.RawString(prefix)
		out.Int(int(in.DifferenceDonationsEarnedInteger))
	}
	{
		const prefix string = ",\"difference_donations_earned_fractional\":"
		out.RawString(prefix)
		out.Int(int(in.DifferenceDonationsEarnedFractional))
	}
	{
		const prefix string = ",\"difference_earned_integer\":"
		out.RawString(prefix)
		out.Int(int(in.DifferenceEarnedInteger))
	}
	{
		const prefix string = ",\"difference_earned_fractional\":"
		out.RawString(prefix)
		out.Int(int(in.DifferenceEarnedFractional))
	}
	{
		const prefix string = ",\"difference_subscribers\":"
		out.RawString(prefix)
		out.Int(int(in.DifferenceSubscribers))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Analitycs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDfaeaa7eEncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Analitycs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfaeaa7eEncodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Analitycs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDfaeaa7eDecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Analitycs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfaeaa7eDecodeGithubComGoParkMailRu20232ChaihonaNo1InternalModel(l, v)
}
